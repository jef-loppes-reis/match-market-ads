{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Match Market Ads","text":"<p>O objetivo desse projeto, e clonar anuncios do Mercado Livre, sendo eles de lojas oficiais. Basicamente e identinficar se o produto e o mesmo de tal loja oficial, seguindo alguns parametros.</p>"},{"location":"#funcionalidades","title":"Funcionalidades","text":"<ol> <li> Baixar lista de lojas oficiais existentes no Mercado Livre;</li> <li> Abrir site geral das lojas oficiais, para categorias Acess\u00f3rios para Ve\u00edculos;</li> <li> Pega cada loja oficial da lista;</li> <li> Cruzar com nossa lista de marcas (usar FUZZY 60%) com nomes de loja oficiais;</li> <li> Validar manualmente e apontar a lista de marcas e os respectivos SKUs ativos;</li> <li> Pegar todos os produtos de uma determinada loja oficial, via HTML (WebScrapping);</li> <li> Pegar a lista do 4\u00ba passo, e avaliar o n\u00edvel de matches, por cada categoria a seguir:</li> <li> GTIN (EAN) - Concorrente &lt;=&gt; GTIN (EAN) - SIAC;</li> <li> MPN - Concorrente &lt;=&gt; MPN \u2013 SIAC\\Fraga;</li> <li> SKU \u2013 Concorrente &lt;=&gt; SKU \u2013 SIAC;</li> <li> OEM|MARCA \u2013 Concorrente &lt;=&gt; OEM|MARCA \u2013 SIAC;</li> <li> Criar uma planilha com os resultados acima;</li> <li> Baixar todos os atributos do an\u00fancio concorrente, substituir os atributos padr\u00f5es como: v\u00eddeo, fotos, c\u00f3digo referencia (SKU), marca, descri\u00e7\u00e3o;</li> <li> Criar um Tkinter, para validacao das imagens;</li> <li> Subir as fotos validadas e ligar o an\u00fancio;</li> </ol>"},{"location":"#mermeid","title":"Mermeid","text":"flowchart TD     A[Start] --&gt;|Read HTML| B[Get infos BeautifulSoup4]     A --&gt;|Read BD| C[Query infos SIAC BD]     B --&gt;|GET HTPP| D[Requests list codes MLB]     D --&gt;|GET API| E(Resquests MLB API)     E --&gt; F[Created DataFrame]     F --&gt; G{ETL Fuzzy infos MLB SIAC}     C --&gt; G     G --&gt; H(DataFrame Results)"},{"location":"#exemplo-da-tabela","title":"Exemplo da tabela","text":"mlb gtin_ml gtin_siac gtin_fuzzy mpn_ml mpn_siac mpn_fuzzy MLB4050163300 7899723815588 7899723815588 100 ASHY24050 ASHY24050 100 MLB3141414637 7899723833681 7899723833681 100 BCVW20025 BCVW20J025 95"},{"location":"#tipo-de-dados","title":"Tipo de dados","text":"<pre><code>    {\n        \"lista_infos_mlb\": \"str\",\n        \"lista_att_necessarios\": \"str\",\n        \"mlb\": \"str\",\n        \"gtin_ml\": \"str\",\n        \"gtin_siac\": \"str\",\n        \"gtin_fuzzy\": \"float\",\n        \"mpn_ml\": \"str\",\n        \"mpn_siac\": \"str\",\n        \"mpn_fuzzy\": \"float\",\n        \"sku_ml\": \"str\",\n        \"sku_siac\": \"str\",\n        \"sku_fuzzy\": \"float\",\n        \"numero_original_ml\": \"str\",\n        \"numero_original_siac\": \"str\",\n        \"numero_original_fuzzy\": \"str\",\n        \"marca_ml\": \"str\",\n        \"marca_siac\": \"str\",\n        \"marca_fuzzy\": \"float\",\n        \"lista_url_anuncios\": \"str\",\n        \"lista_mlb\": \"str\",\n        \"soma_fuzzy\": \"float\"\n    }\n</code></pre>"},{"location":"gui/","title":"GUI Tkinter","text":"<p>O c\u00f3digo define uma aplica\u00e7\u00e3o Python utilizando Tkinter para a interface gr\u00e1fica, PIL para manipula\u00e7\u00e3o de imagens e pandas para manipula\u00e7\u00e3o de dados. O objetivo da aplica\u00e7\u00e3o \u00e9 verificar fotos ao iterar por um DataFrame, permitindo que os usu\u00e1rios marquem fotos como corretas ou incorretas e naveguem entre elas. Aqui est\u00e1 uma vis\u00e3o geral de como cada parte do c\u00f3digo funciona.</p> <p></p>"},{"location":"gui/#funcionalidades","title":"Funcionalidades","text":"<ol> <li> <p>Inicializa\u00e7\u00e3o da Classe (<code>App</code>):</p> <ul> <li>A classe come\u00e7a com v\u00e1rias vari\u00e1veis de classe para gerenciar o estado da aplica\u00e7\u00e3o, como caminhos, DataFrames padr\u00e3o, elementos da GUI e configura\u00e7\u00f5es de \u00edndice.</li> </ul> </li> <li> <p>M\u00e9todos de Gerenciamento de Dados:</p> <ul> <li><code>created_new_dataframe</code>: Gera um novo DataFrame listando todos os arquivos de fotos em um diret\u00f3rio, extrai detalhes dos nomes dos arquivos e salva o DataFrame tanto como um arquivo <code>.feather</code> quanto <code>.csv</code>.</li> <li><code>ler_dataframe</code>: Carrega um DataFrame existente de um arquivo <code>.feather</code> e configura o DataFrame para iterar atrav\u00e9s de fotos n\u00e3o verificadas.</li> </ul> </li> <li> <p>Gerenciamento de \u00cdndices:</p> <ul> <li><code>__mudar_indices</code>: Um m\u00e9todo para atualizar a configura\u00e7\u00e3o dos \u00edndices.</li> <li><code>__alternar_indice</code>: Ajusta o \u00edndice atual com base na intera\u00e7\u00e3o do usu\u00e1rio para avan\u00e7ar ou retroceder na lista de fotos.</li> </ul> </li> <li> <p>Exibi\u00e7\u00e3o de Imagens:</p> <ul> <li><code>__mostrar_imagem</code>: Gerencia o carregamento e redimensionamento da imagem atual do DataFrame e atualiza a GUI para exibir a imagem.</li> <li><code>__mostrar_indices</code>: Atualiza a GUI para mostrar o \u00edndice atual da foto.</li> </ul> </li> <li> <p>Intera\u00e7\u00e3o com a GUI:</p> <ul> <li><code>__janela</code>: Gerencia as intera\u00e7\u00f5es da GUI, como responder aos cliques dos bot\u00f5es. Atualiza o DataFrame com base em se uma foto \u00e9 marcada como correta, incorreta ou se o usu\u00e1rio deseja voltar a uma foto anterior.</li> <li>O tratamento de erros est\u00e1 inclu\u00eddo para quando o usu\u00e1rio tenta navegar al\u00e9m do intervalo dispon\u00edvel de fotos.</li> </ul> </li> <li> <p>Execu\u00e7\u00e3o Principal:</p> <ul> <li>O m\u00e9todo <code>main</code> configura o estado inicial da GUI, bot\u00f5es e lan\u00e7a o loop de eventos principal do Tkinter.</li> <li>Este m\u00e9todo \u00e9 ativado na \u00faltima parte do script, que verifica se o script est\u00e1 sendo executado como o programa principal.</li> </ul> </li> <li> <p>Caminho do Arquivo e Valida\u00e7\u00e3o de Fotos:</p> <ul> <li>Presume-se que as fotos estejam em um subdiret\u00f3rio <code>out_files_photos</code> relativo ao local do script. O nome de cada arquivo de foto \u00e9 dividido para extrair metadados presumivelmente usados para valida\u00e7\u00e3o.</li> </ul> </li> <li> <p>Componentes da GUI Tkinter:</p> <ul> <li>A GUI utiliza bot\u00f5es para interagir com o usu\u00e1rio, permitindo que validem cada foto como correta ou incorreta, ou para navegar de volta a uma foto anterior.</li> </ul> </li> </ol> <p>Este script \u00e9 projetado para fornecer uma interface direta para tarefas de verifica\u00e7\u00e3o de fotos, particularmente \u00fatil para tarefas como validar conjuntos de dados de imagens. Ele combina intera\u00e7\u00e3o GUI com manipula\u00e7\u00e3o de dados de forma que usu\u00e1rios n\u00e3o t\u00e9cnicos possam operar, o que \u00e9 crucial para tarefas que envolvem a verifica\u00e7\u00e3o manual de numerosos itens como fotos.</p>"},{"location":"uso/","title":"Uso","text":"<ol> <li>Baixe o repositorio do projeto <pre><code>git clone 'repositorio'\n</code></pre></li> <li>Depedencias <pre><code>py -m venv .venv;\n.venv/Scripts/activate;\npip install -r ./requirements.txt\n</code></pre></li> <li>Execu\u00e7\u00e3o <pre><code>py main.py\n</code></pre> 3.1 Digite o nome ou URL da loja oficial, no terminal.</li> </ol>"}]}